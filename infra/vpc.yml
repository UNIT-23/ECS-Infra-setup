AWSTemplateFormatVersion: '2010-09-09'
Description: VPC for ecs test

Parameters:
  MaxSubnets:
    Type: Number
    Default: '1'
    Description: Maximum number of subnets.

Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      # The CIDR block you want the VPC to cover.
      CidrBlock: '10.0.0.0/24'
      # if true then Amazon DNS server resolves DNS hostnames for your instances to their corresponding IP addresses 
      EnableDnsSupport: true
      # if true instances in the VPC get DNS hostnames;
      EnableDnsHostnames: true
      #  allowed tenancy of instances launched into the VPC. e.g default or dedicated
      InstanceTenancy: default

  
  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs 'us-east-1']
      CidrBlock: !Sub '10.0.0.0/25'
      # Indicates whether instances that are launched in this subnet receive a public IP address. By default, the value is false.
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: 'Subnet1'


  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs 'us-east-1']
      CidrBlock: !Sub '10.0.0.128/25'
      # Indicates whether instances that are launched in this subnet receive a public IP address. By default, the value is false.
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: 'Subnet2'     


  InternetGateway:
    Type: AWS::EC2::InternetGateway


  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC


  RouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC

  Subnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref Subnet1
      RouteTableId: !Ref RouteTable    

  Subnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref Subnet2
      RouteTableId: !Ref RouteTable        


  InternetRoute:
    Type: 'AWS::EC2::Route'
    # Depends on gateway to internet
    DependsOn: VPCGatewayAttachment
    Properties:
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTable
      # The IPv4 CIDR address block used for the destination match. For example, 0.0.0.0/0. Routing decisions are based on the most specific match.
      DestinationCidrBlock: '0.0.0.0/0'   


Outputs:

  VPC:
    Description: VPC
    Value: !Ref VPC
    Export:
      Name: 'VPC'

  Subnet1:
    Description: 'Subnet 1 on AZ1'
    Value: !Ref Subnet1
    Export:
      Name: 'Subnet1'

  Subnet2:
    Description: 'Subnet 2 on AZ2'
    Value: !Ref Subnet2
    Export:
      Name: 'Subnet2'            

 

